##Tema: Gestión de vehículos oficiales

Descripción: Se dispone de una api que permite realizar funciones de gestion de vehiculos oficiales con el siguiente modelo de datos (roles, usuarios,vehiculos y tarjetones). 
También se va a realizar el uso de la blockchain con la funcion registrarTarjeton(). Los tarjetones son los permisos que llevan los vehiculos oficiales para permitirles estacionar en cualquier lugar disponible 
y son utilizados por personal policial para verificar su validez en caso de ser necesario.  El contrato estará formado por los siguientes datos (idVehiculo,dominio,fechaRegistro,añoValidez) y sera alojado en la red (Sepolia).

##ARQUITECTURA

#Modelo de datos
/modelo  contiene los modelos de datos

Relaciones
Usuario  *---1 Rol, 
Vehiculo 1---* Tarjeton

#Backend
config.py:  tiene la configuracion de la bd
sdd-api1.py: es el main donde  se exponen los endpoints
/blockchain: tiene todas las configuraciones del contrato en la blockchain
/modelo: tiene los objetos mapeados de la base de datos
/templates: tiene la app web que prueba los endpoints de la api

#Frontend
jquery-3.7.1.min.js: libreria de apoyo
API.js:  urls de los endpoints
nav.js: dota de responsive a la pagina
vehiculos.css: estilos de la pagina
vehiculos.html: es la pagina principal

##BD
/instance
jwedatabase.db      es la bd en sqlite
jwedatabase.db.sql  contiene el dump de la bd con datos precargados

##BACKEND

Funcionalidades propias de la api:

-registro de usuario:
POST /v1/usuarios/registrar
condiciones a aplicar: longitud mínima de pass 8, guardar el pass hasheado encriptado, que no exista el username, por default se registran con rol Gestor
-login de usuario:
POST /v1/usuarios/login
condiciones a aplicar:  Todos pueden loguearse. Futuramente se pretende agregar un control de intentos como máximo de intentos 5 luego bloqueo de ip por 10min,
-registrar tarjeton
GET /v1/vehiculos/registrarTarjeton
condicion a plicar: en este caso es un ejemplo que setea datos (harcodeados de prueba) en un contrato en la blockchain de Sepolia anteriormente generado.

Funcionalidades no agregadas, por considerar que solo las primeras de arriba ya demuestran todas las medidas de seguridad buscadas en el tp, pero las describimos como serian.
-modificar clave de usuario 
PUT /v1/usuarios/"idUsuario"
condiciones: que exista el usuario
-baja de usuario
DELETE /v1/usuarios/"idUsuario"
condiciones: que exista el usuario
-obtener usuarios
GET /v1/usuarios
descripción: obtiene los usuarios de la bd
-obtener vehículos
GET /v1/vehiculos
descripción: obtiene los vehículos para luego a través de otra accion generar un tarjetón para el vehiculo seleccionado
-registrar tarjeton
POST /v1/vehiculos/registrarTarjeton
descripción: setea valores de un contrato en la blockchain para el vehiculo seleccionado
-verificarTarjeton: 
GET /v1/vehiculos/<idVehiculo>
descripción: se hace un get de la blockchain del vehiculo para obtener los datos del vehiculo y asi el agente puede verificar la validez de los datos.

Perfiles:
Admin puede acceder a los servicios:
-registro de usuario
-login de usuario
-modificar clave de usuario
-baja de usuario
-obtener usuarios

Gestor puede acceder a los servicios:
-login de usuario
-obtener vehículos
-generar tarjeton

Oficial puede acceder a los servicios:
-login de usuario
-verificar tarjeton 





